#include <esp_now.h>
#include <WiFi.h>
#include <ESP32Servo.h>

//  Slave MAC Addresses (Replace with actual MACs)
uint8_t slaveMAC1[] = {0xCC, 0xDB, 0xA7, 0x97, 0x9E, 0xC4};
uint8_t slaveMAC2[] = {0x1C, 0x9D, 0xC2, 0xF4, 0x87, 0x80};
uint8_t slaveMAC3[] = {0xCC, 0xDB, 0xA7, 0x92, 0xB1, 0x14};

//  Servo Setup
Servo servos[6];
const int servoPins[6] = {4, 16, 17, 5, 18, 19}; // Update with actual servo pins
bool servosActivated = false;

// ðŸ“¡ ESP-NOW Message Struct
typedef struct {
    bool fireDetected;
} message_t;
message_t receivedMessage;

// ðŸ“¥ Data Received Callback
void onDataReceived(const esp_now_recv_info_t *info, const uint8_t *data, int len) {
    memcpy(&receivedMessage, data, sizeof(receivedMessage));
    
    if (receivedMessage.fireDetected) {
        activateServos();
        Serial.println(" Fire Detected! Moving Servos");
    } else {
        resetServos();
        Serial.println(" No Fire! Resetting Servos");
    }
}

//  Data Sent Callback
void onDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
    Serial.print("Message Sent: ");
    Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Success" : "Fail");
}

//  Add Peer Function
void addPeer(uint8_t *mac) {
    esp_now_peer_info_t peerInfo = {};
    memcpy(peerInfo.peer_addr, mac, 6);
    peerInfo.channel = 0;
    peerInfo.encrypt = false;
    esp_now_del_peer(mac);
    esp_now_add_peer(&peerInfo);
}

void setup() {
    Serial.begin(115200);
    WiFi.mode(WIFI_STA);
    
    // Attach Servos
    for (int i = 0; i < 6; i++) {
        servos[i].attach(servoPins[i]);
        servos[i].write(0); // Start at 0Â°
    }
    
    // Initialize ESP-NOW
    if (esp_now_init() != ESP_OK) {
        Serial.println("ESP-NOW Initialization Failed!");
        return;
    }
    
    esp_now_register_recv_cb(onDataReceived);
    esp_now_register_send_cb(onDataSent);
    
    addPeer(slaveMAC1);
    addPeer(slaveMAC2);
    addPeer(slaveMAC3);
    
    Serial.println("ESP-NOW Initialized");
}

void loop() {
    // Nothing needed here; ESP-NOW handles data reception
}

//  Move Servos
void activateServos() {
    if (!servosActivated) {
        for (int i = 0; i < 6; i++) {
            servos[i].write(90);
        }
        servosActivated = true;
    }
}

//  Reset Servos
void resetServos() {
    if (servosActivated) {
        for (int i = 0; i < 6; i++) {
            servos[i].write(0);
        }
        servosActivated = false;
    }
}
